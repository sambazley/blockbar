.TH BLOCKBAR 1
.SH NAME
blockbar \- Blocks based status bar for X window managers

.SH SYNOPSIS
\fBblockbar\fR [\fIconfig_file\fR | \fB-h\fR | \fB\-\-help\fR]

\fBbbc\fR [\fIcommand\fR]

.SH OPTIONS
.TP
\fIconfig_file\fR
Use the provided configuration file, rather than the default.
.TP
\fB\-h\fR, \fB--help\fR
Print the help text.

.SH CONFIG
Unless specified, blockbar looks for the configuration file in the following
places:
.IP 1
$XDG_CONFIG_HOME/blockbar/config
.IP 2
$HOME/.config/blockbar/config

.PP
The configuration file is a JSON file, that has the following sections:
.PP
.in +4n
.EX
{
    <General bar settings>,
    "modules": [
        <paths to module binaries>
    ],
    "left": [
        <Left block settings objects>,
        {
            ...
        },
        {
            ...
        },
        ...
    ],
    "center": [
        <Center block settings objects>
    ],
    "right: [
        <Right block settings objects>
    ]
}
.EE
.in

.PP
A variable of type "Color" can be either:
.IP 1
an array in the format of [r, g, b] or [r, g, b, a],
where r, g, b, and a are integers in the range of 0-255.
.IP 2
a string in the format of "#RRGGBB", "#RGB", "#RRGGBBAA", or "#RGBA",
where RR, GG, BB, and AA are hexadecimal integers in the range of 0x00-0xFF.
If the string is in the format of "#RGB" or "#RGBA", the string will be
interpreted as if it was written as "#RRGGBB" or "#RRGGBBAA" respectively.

.PP
A variable of type "Position" can have a value of "left", "right", or "center".

.PP
.TS
allbox tab(|);
cB s s s
cB cB cB cB
l2 lx2 l2 l.
General bar settings
Key|Description|Type|Default
height|T{
Height of the bar.
T}|Integer|22
marginvert|T{
Margin above or below the bar.
T}|Integer|0
marginhoriz|T{
Margin on the left and right of the bar.
T}|Integer|0
xoffset|T{
Horizontal offset of the bar.
T}|Integer|0
radius|T{
Radius of the curvature of the corners of the bar.
T}|Integer|0
padding|T{
Padding on both sides of each block.
T}|Integer|5
background|T{
Background color of the bar.
T}|Color|[0,0,0]
foreground|T{
Default text color.
T}|Color|[255,255,255]
font|T{
Font name and size.
T}|String|System default
shortlabels|T{
If true, a block's label will still be rendered if the bar is in short mode.
T}|Boolean|true
position|T{
Postion of the screen that the bar appears on. "top" or "bottom".
T}|String|"top"
divwidth|T{
Divider width.
T}|Integer|1
divheight|T{
Divider height.
T}|Integer|-
divvertmargin|T{
Margin above and below the dividers. Ignored if divheight is set.
T}|Integer|4
divcolor|T{
Divider color.
T}|Color|[51,51,51]
borderwidth|T{
Width of the border.
T}|Integer|0
bordercolor|T{
Color of the border.
T}|Color|[0, 0, 0, 0]
traydiv|T{
If true, a divider is drawn between the blocks and the tray.
T}|Integer|true
traypadding|T{
Padding to the right of each tray icon.
T}|Integer|2
trayiconsize|T{
Width and height of each tray icon.
T}|Integer|18
traybar|T{
Name of output (see xrandr) that the tray should display on.
T}|String|\-
trayside|T{
Side of the bar that the tray appears on. "left" or "right".
T}|Position|"right"
.TE

.PP
.TS
allbox tab(|);
cB s s s
cB cB cB cB
l2 lx2 l2 l.
Block Settings
Key|Description|Type|Default
module|T{
The name of the module that handles he block.
T}|String|"legacy"
eachmon|T{
If true, the block will execute once per monitor,
BAR_OUTPUT will be set to the output's name.
T}|Boolean|false
label|T{
Static text that appears before the script output.
Only works with legacy blocks.
T}|String|""
exec|T{
Path to the executable to run.
T}|String|""
interval|T{
Time between each execution of the block's script.
If 0, the block will only execute once.
T}|Integer|0
padding|T{
Adds to the padding on both sides of the block.
T}|Integer|0
paddingleft|T{
Adds to the padding to the left of the block.
T}|Integer|0
paddingright|T{
Adds to the padding on the right of the block.
T}|Integer|0
nodiv|T{
If true, the divider to the right of the block is not drawn.
T}|Boolean|false
.TE

.SH
ENVIRONMENT VARIABLES
.PP
The following environment variable should be set before \fBblockbar\fR and
\fBbbc\fR are executed.

.SS BLOCKBAR_SOCKET
The path of the socket used for the communication between
\fBbbc\fR and \fBblockbar\fR. If this variable is not set,
/tmp/blockbar-socket is used instead.

.PP
The following environment variables can be set by \fBblockbar\fR when a block
is executed.

.SS BLOCK_BUTTON
If the block's execution was triggered by a click, this variable will be set
to the mouse button's number ("1", "2", etc).

.SS BAR_OUTPUT
If the block has \fIeachmon\fR=true, or the block was clicked, this variable
will be set to the output's name (see xrandr).

.SS CLICK_X
If the block's execution was triggered by a click, this variable will be set
to the x coordinate of the cursor.

.SS BLOCK_X
The x coordinate of the block.

.SS BLOCK_WIDTH
The width of the block, including padding.

.SH
BBC COMMANDS

.SS list
\fIlist\fR

Lists blocks by their indices and \fIexec\fR value.

.SS exec
\fIexec\fR <\fIindex\fR>

Executes a block's script.

.SS list-properties
\fIlist-properties\fR

Lists the type, name, and description of each block property.

.SS list-settings
\fIlist-settings\fR

Lists the type, name, and description of each of the bar's settings.

.SS property
\fIproperty\fR <\fIindex\fR>[:\fIoutput\fR] <\fIproperty\fR> [\fIvalue\fR]

Gets or sets the value of a property of a block.
If the block has \fIeachmon\fR=true, the output value will need to be set.
If a valid \fIvalue\fR is provided, the property's value will be changed,
otherwise, an error will be returned if the \fIvalue\fR is invalid, or the
current value of the property will be returned if no \fIvalue\fR is provided.

.SS setting
\fIsetting\fR <\fIsetting\fR> [\fIvalue\fR]

Gets or sets the value of a setting of the bar.
If a valid \fIvalue\fR is provided, the setting's value will be changed,
otherwise, an error will be returned if the \fIvalue\fR is invalid, or the
current value of the setting will be returned if no \fIvalue\fR is provided.

.SS new
\fInew\fR [\fB--eachmon\fR]

Creates a new block and returns the new block's index. If \fB--eachmon\fR is
passed, the block will be created with \fIeachmon\fR=true.

.SS rm
\fIrm\fR <\fIindex\fR>

Removes a block.

.SS move-left
\fImove-left\fR <\fIindex\fR>

Moves a block to the left.

.SS move-right
\fImove-right\fR <\fIindex\fR>

Moves a block to the right.

.SS dump
\fIdump\fR [\fB--explicit\fR]

Dumps the current configuration to stdout. By default, only properties and
settings that differ from their default values will be dumped, however,
if \fB--explicit\fR is passed, all properties and settings will be dumped.

.SH
AUTHOR
Sam Bazley <sambazley@protonmail.com>

